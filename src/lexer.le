use utf8;
global pub;

struct Lexer {
    string file;
    string input;
    i64 position;
    i64 row;
    i64 bol;
};

fn Lexer::new(string file) {
    return Lexer {
        file = file,
        input = io::read_to_string(file),
        position = 0,
        row = 0,
        bol = 0
    };
}

fn Lexer::is_eof(Lexer *self) {
    return self.position >= self.input.len();
}

fn Lexer::current_char(Lexer *self) {
    left_until_eof := self.input.len() - self.position;
    offset := left_until_eof <= 4 ? left_until_eof : (i64)4;
    slice := string::slice(self.input, self.position, self.position + offset);
    return slice.utf8_decode();
}

fn Lexer::advance(Lexer *self) {
    if !self.is_eof() {
        self.position += self.input[self.position].unicode_length();

        if self.input[self.position - 1] == '\n' {
            self.bol = self.position;
            self.row += 1;
        }
    }
}

fn Lexer::skip_whitespace(Lexer *self) {
    while !self.is_eof() && (char::is_whitespace(self.current_char().inner)))
        || self.current_char().encode() == "　" {
        self.advance();
    }
}

fn Lexer::consume_identifier(Lexer *self) {
    start_pos := self.position;
    identifier := [rune *;];

    while !self.is_eof() {
        current_char := self.current_char();

        if current_char.is_letter() || current_char.inner == '_' {
            identifier.push(current_char);
            self.advance();
        } else {
            break;
        }
    }

    return identifier.map<string>(rune::encode).join("");
}

fn Lexer::consume_string_literal(Lexer *self) {
    self.advance();
    res := [rune *;];

    while !self.is_eof() {
        current_char := self.current_char();

        if current_char.encode() == "」" {
            self.advance();
            break;
        } else {
            res.push(current_char);
            self.advance();
        }
    }

    return res.map<string>(rune::encode).join("");
}

fn Lexer::consume_number_literal(Lexer *self) -> string {
    start_pos := self.position;
    digits := [rune *;];

    while !self.is_eof() && self.current_char().is_number() {
        digits.push(self.current_char());
        self.advance();
    }

    return digits.map<string>(rune::encode).join("");
}

fn Lexer::next_token(Lexer *self) -> (string, string) {
    if self.is_eof() {
        return nil;
    }

    self.skip_whitespace();

    c := self.current_char();

    if c.is_letter() {
        return $("identifier", self.consume_identifier());
    }

    if c.encode() == "「"　{
        return $("string", self.consume_string_literal());
    }

    if c.is_number() {
        return $("number", self.consume_number_literal());
    }

    if c.is_punctuation() {
        punct := self.current_char();
        self.advance();
        return $("punctuation", punct.encode());
    }

    return nil;
}
